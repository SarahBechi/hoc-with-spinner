{"version":3,"sources":["components/MovieList.js","components/spinner.js","App.js","components/Hoc.js","serviceWorker.js","index.js"],"names":["MovieList","props","state","movielist","name","year","img","rating","className","this","map","el","i","key","src","alt","padEnd","Component","Spinner","HOC","WrappedComponent","timeup","setTimeout","setState","console","log","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAsCeA,E,YAnCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAW,CAAC,CAAEC,KAAM,aAAcC,KAAM,KAAMC,IAAK,kGAAmGC,OAAQ,GAC9J,CAAEH,KAAM,QAASC,KAAM,KAAMC,IAAK,wFAAyFC,OAAQ,GACnI,CAAEH,KAAM,aAAcC,KAAM,KAAMC,IAAK,+EAAgFC,OAAQ,KALpH,E,sEAiBf,OAEI,yBAAKC,UAAU,aACVC,KAAKP,MAAMC,UAAUO,KAAI,SAACC,EAAIC,GAC3B,OACI,yBAAKC,IAAKD,EAAGJ,UAAU,SACnB,yBAAKM,IAAKH,EAAGL,IAAKS,IAAI,YAAYP,UAAU,UAC5C,yBAAKA,UAAU,QACX,2BAAIG,EAAGP,MACP,iCAAOO,EAAGN,MACV,2BAAI,GAAGW,OAAOL,EAAGJ,OAAQ,gB,GA5BjCU,aCSTC,G,MARC,WACZ,OACI,6BACK,yBAAKV,UAAU,cCWbW,MCdH,SAAAC,GACR,mBACI,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTmB,QAAQ,GAGZC,YACI,kBACI,EAAKC,SAAS,CACVF,QAAQ,MAEhB,MAEJG,QAAQC,IAAI,EAAKvB,MAAMmB,QAbR,EADvB,sEAkBQ,OAAOZ,KAAKP,MAAMmB,OACd,kBAAC,EAAD,MAEI,kBAACD,EAAqBX,KAAKR,WArB3C,EAAM,CAAmByB,IAAMT,WDapBE,EATf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,UECcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.f92176fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass MovieList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movielist: [{ name: \"The Tannel\", year: 2013, img: \"https://dcassetcdn.com/design_img/3642677/448887/448887_20646763_3642677_ed7dc0ec_thumbnail.png\", rating: 3 },\r\n            { name: \"Joker\", year: 2020, img: \"https://i.etsystatic.com/10683147/r/il/674c50/1875093104/il_570xN.1875093104_cxqa.jpg\", rating: 5 },\r\n            { name: \"Fight Club\", year: 1999, img: \"https://i.pinimg.com/originals/fd/5e/66/fd5e662dce1a3a8cd192a5952fa64f02.jpg\", rating: 5 }\r\n            ],\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"container\">\r\n                {this.state.movielist.map((el, i) => {\r\n                    return (\r\n                        <div key={i} className=\"movie\">\r\n                            <img src={el.img} alt=\"img-movie\" className=\"image\" />\r\n                            <div className=\"info\">\r\n                                <p>{el.name}</p>\r\n                                <p>   {el.year}</p>\r\n                                <p>{\"\".padEnd(el.rating, \"*\")}</p>\r\n                            </div>\r\n                        </div>)\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MovieList;\r\n\r\n","import React from \"react\";\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div>\r\n            {<div className=\"loader\"></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react';\nimport './App.css';\nimport MovieList from './components/MovieList';\nimport HOC from './components/Hoc';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MovieList />\n    </div>\n  );\n}\n\n\nexport default HOC(App);\n\n\n\n\n\n","import React from \"react\";\r\nimport Spinner from \"./spinner\";\r\n\r\nconst HOC = WrappedComponent => {\r\n    return class HOC extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                timeup: true\r\n            };\r\n\r\n            setTimeout(\r\n                () =>\r\n                    this.setState({\r\n                        timeup: false\r\n                    }),\r\n                1500\r\n            );\r\n            console.log(this.state.timeup);\r\n        }\r\n\r\n        render() {\r\n            return this.state.timeup ? (\r\n                <Spinner />\r\n            ) : (\r\n                    <WrappedComponent {...this.props} />\r\n                );\r\n        }\r\n    };\r\n};\r\n\r\nexport default HOC;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}